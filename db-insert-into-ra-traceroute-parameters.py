#!/usr/bin/env python

# *This script takes the RIPE Atlas measurement results from a json file
# which was generated by `db-fetch-traceroute-datasets-write-to-json.py`
# and inserts them in `ra_traceroute_parameters` table.

import os
import pandas as pd
import sys
import sqlite3
import getopt
import json

try: path = os.path.dirname(os.path.realpath(__file__))
except Exception as e: path = os.getcwd()

DB_LOCATION = '%s/lastmile.db'%path
RA_TRACEROUTE_PARAMETERS = 'ra_traceroute_parameters'

columns = ['probeid', 'starttime', 'hop', 'result']
df_result = pd.DataFrame(columns=columns)

def get_df_udm_json_data(udm_json_data):

    global df_result

    df = pd.DataFrame(udm_json_data)

    df.rename (  columns={  'from'        :    'probe_ip'
                          , 'prb_id'      :    'probeid'
                          , 'size'        :    'packet_size'
                          , 'timestamp'   :    'starttime'
                          , 'type'        :    'msm_type'
                         }
               , inplace=True
              )

    if not silent:
        print('[df: %d] ...'%df.count()[0], end='')
        sys.stdout.flush()

    def myfunc(x):
        global df_result
        probeid = x['probeid']; starttime = x['starttime']; result = x['result']
        df_temp = pd.DataFrame(result)
        df_temp['probeid'] = probeid
        df_temp['starttime'] = starttime
        df_result = df_result.append(df_temp)
        return None

    df.apply(myfunc, axis=1)

    del df['result']

    df_joined = df.merge(df_result, on=['probeid', 'starttime'])

    try:
        df_joined.drop('error', axis=1, inplace=True)
        print('*', end='')
    except Exception as e: pass

    df_joined.rename (  columns={  'hop'         :    'result_hop_no'
                                 , 'result'      :    'result_hop_blob'
                                }
                      , inplace=True
                     )

    try: df_joined['result_hop_blob'] = \
        df_joined['result_hop_blob'].apply(lambda x: '%s'%x)
    except KeyError as e: df_joined['result_hop_blob'] = ''

    df_joined.dropna(  how='any'
                     , subset=['msm_id', 'probeid', 'endtime', 'result_hop_no']
                     , inplace=True
                    )

    return df_joined

def write_df_to_table(con, df, tablename):
    cur = con.execute('pragma foreign_keys=ON')

    index_label = ['msm_id', 'probeid', 'endtime', 'result_hop_no']
    df = df.set_index(index_label)

    df.to_sql(  '%s'%tablename
              , con
              , flavor='sqlite'
              , if_exists = 'append'
              , index_label = index_label
             )

    con.commit()


def main(silent, fsock_input):

  con = sqlite3.connect(DB_LOCATION)

  # open each file
  for line in fsock_input.readlines():
      infilename = line.rstrip()
      infilename_base = os.path.basename(infilename)
      infilename_dir = os.path.dirname(infilename)
      infilename_base_a, infilename_base_b = os.path.splitext(infilename_base)

      if not silent:
        print('%s [reading] ...'%infilename, end='')
        sys.stdout.flush()


      # read the file
      with open(infilename, 'r') as injsonfile:
          try:
            injson = injsonfile.read()
            injson_data = json.loads(injson)
            df = get_df_udm_json_data(injson_data)

            if not silent:
              print('[dumping] ...', end=''); sys.stdout.flush()

            try: write_df_to_table(con, df, RA_TRACEROUTE_PARAMETERS)
            except Exception as e: print(e, type(e))
            else:
              if not silent:
                  print('[done]')
                  sys.stdout.flush()
              status = os.system('rm %s'%infilename)
              if status is not 0: raise Exception('cannot delete file %s'%infilename)

          except Exception as e:
            print(e, file=sys.stderr)
            break

  con.close()

  if fsock_input is not sys.stdin:
      fsock_input.close()

def usage():
  print('%% python %s [--silent|-s]'%sys.argv[0])
  sys.exit(0)

if __name__ == '__main__':
  silent = False; fsock = sys.stdin

  try: opts, args = getopt.getopt(sys.argv[1:], 's', ['silent'])
  except Exception as e:
    print(e, file=sys.stderr)
    usage()
  else:
    for opt, arg in opts:
      if opt in ('-s', '--silent'): silent = True

    main(silent, fsock)
